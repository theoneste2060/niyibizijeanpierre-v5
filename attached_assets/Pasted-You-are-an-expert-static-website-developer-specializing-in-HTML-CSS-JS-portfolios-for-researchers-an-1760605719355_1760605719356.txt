You are an expert static website developer specializing in HTML/CSS/JS portfolios for researchers and engineers. Your task is to audit and fix ALL coding issues in this multi-page static website for NIYIBIZI Jean Pierre (a Rwandan geotechnical engineer and AI innovator). The site is fully static: no backend, just HTML files with shared style.css and navbar.js. Goal: Make it production-ready—error-free, consistent, accessible, SEO-optimized, and deployable to Netlify/GitHub Pages.

### Project Overview
- **Theme:** Professional portfolio with sections: Home (index.html), About (about.html), Projects (projects.html), Publications (publications.html), Blog (blog.html + individual posts), Media (media.html), Contact (contact.html).
- **Key Features:** Responsive navbar (hamburger menu via navbar.js), hero sections, card grids, blog articles with images/figures/tables/quotes, schema markup, Open Graph/Twitter metas.
- **Assets:** style.css (for layout/fades/grids), navbar.js (for mobile toggle), logo.jpg (favicon/profile pic), assets/img folders (e.g., blog images like east-africa-construction.jpg).
- **Deployment Context:** Static site; ensure clean HTML5, valid links, fast loads. No new dependencies—stick to vanilla JS/CSS.

### Files to Audit/Fix (All in Root Unless Noted)
1. index.html (home/hero/about/featured project)
2. about.html (bio/company/mission/awards)
3. projects.html (geotech/AI/agri sections with grids)
4. publications.html (pub list + research interests)
5. blog.html (blog hub with 3-card grid + view counters via JS)
6. blog-ai-geotech.html (AI transformation post)
7. blog-sustainable-construction.html (climate-resilient infra post—note: has truncation in UL at "So...ifespan")
8. blog-ai-driven-soil-analysis.html (smart agri post with table/workflow)
9. media.html (bio/gallery/press/company/contact)
10. contact.html (form + info/collaboration)
11. style.css (global styles—ensure consistency)
12. navbar.js (toggle script—test mobile)
13. Any assets/img (optimize if oversized; add alts where missing)

### Step-by-Step Instructions
1. **Full Code Scan:**
   - Run a lint (e.g., simulate HTML validator): Fix syntax errors, unclosed tags, invalid attributes (e.g., ensure all <a> have proper href, <img> have alt).
   - Handle truncations: Complete incomplete text (e.g., in blog-sustainable-construction.html UL: "Soil erosion shortening infrastructure lifespan." → full sentence like "Soil erosion accelerating degradation and shortening infrastructure lifespan.").
   - Check JS: Ensure navbar.js works (no console errors); fix view counter fetch in blog.html (handle API errors gracefully, default to 0).

2. **Consistency Fixes:**
   - **Links:** All internal hrefs relative/correct (e.g., blog posts link back to blog.html; active class on navbar).
   - **Metas/SEO:** Uniform titles/descriptions (150-160 chars), OG/Twitter tags, canonicals, schema (Person/Organization/BlogPosting). Add keywords meta to all if missing.
   - **Footer:** Standardize © 2025 notice + email link across all.
   - **Images:** Add/optimize alt texts (descriptive, keyword-rich, e.g., "Rwanda soil analysis dashboard for AI crop predictions"); ensure paths correct (e.g., ./assets/img/...).
   - **Accessibility:** ARIA labels on all interactive (e.g., menu-toggle), semantic HTML (H1-H3 hierarchy), alt on figs, color contrast in CSS assumptions.

3. **Blog-Specific Fixes:**
   - Hub (blog.html): Make grid responsive; fix JS view counter (use localStorage fallback if /api/views fails).
   - Posts: Ensure HR dividers, figures (with figcap), tables (accessible thead/tbody), quotes. Add related posts section in footers (e.g., link AI geotech to soil analysis). Fix dates to current (Oct 2025 ok, but consistent format).
   - Categories: Add simple JS tags/filters to blog grid (e.g., AI/Sustainability).

4. **Optimizations:**
   - Performance: Minify CSS/JS if bloated; lazy-load images (<img loading="lazy">).
   - Mobile: Test viewport/responsiveness (e.g., project-grid stacks on small screens).
   - Forms: Upgrade contact.html mailto to Formspree placeholder (as noted); add required validation via JS.
   - SEO Extras: Add sitemap.xml stub (list all URLs); robots.txt (User-agent: * Allow: /).

5. **Testing & Output:**
   - Simulate: Open each page in browser sim; check console for errors; validate HTML (W3C style).
   - No Breaking Changes: Preserve design/content—only fix/improve.
   - Report: After fixes, output a changelog (e.g., "Fixed X in file Y") + any new files (e.g., sitemap.xml).
   - Deploy-Ready: Ensure site builds statically; suggest Netlify _redirects for SPA feel if needed.

Run the full audit now, apply fixes in-place, and confirm with a summary of changes. If issues persist, flag them for manual review.